# VectorTraits_design

## Conditional compilation symbols(条件编译符号)
### Global (全局)

- UNSAFE: 是否使用 unsafe 关键字。
- UNSAFE_USE_TRAITS: 是否使用 unsafe 版的 VectorTraits 。
- SOFTWARE_OPTIMIZATION: Software algorithm optimization（软件算法优化）, 会利用其它向量函数组合实现. 如 ShiftLeft_Multiply、ShiftRightArithmetic_Var64 .
- HARDWARE_OPTIMIZATION: Hardware algorithm optimization（硬件算法优化）, 会尝试更优化的算法. 如 ShiftRightArithmeticFast_If .
- BCL_OVERRIDE_BASE_FIXED: 用有硬件加速的新版 BCL 库的方法来覆盖固定长度向量的算法. 仅对有硬件加速的来使用.
- BCL_OVERRIDE_BASE_VAR: 用新版 BCL 库的方法来覆盖可变长度向量的算法. 它一般需要通过分支或循环来实现，性能不一定比BCL算法优化。且能获得.NET版本更新带来的改进，故用它。
- BCL_BASE_OVERRIDE_STATIC: 对于特性静态方法（Vectors.Traits.cs等文件）, 是否直接调用Base版的静态方法, 而不是动态调用接口方法。因为低版本.NET（< `.NET Core 3.0`）在通过接口调用封固类方法时，不会内联。实际测试后发现，`.NET Core 3.0`才开始支持“在通过接口调用封固类方法时的内联”，而且该版本才支持内在函数。
- BCL_VER_OVERRIDE_STATIC: 对于特性静态方法（Vectors.Traits.cs等文件）, 是否根据版本直接调用BCL方法, 而不是动态调用接口方法。这是为了简化JIT编译优化的工作量, 仅 X86、Arm都存在硬件优化时才应用它. 
- EX_APPLY_GENERIC: 对于向量的泛型方法(如 YGroup2Unzip_Int128 等), 是否也应用扩展类型. 用于对比 ExAs 是否会增加开销.
- USE_VECTOR_CREATE: 用向量创建（如 `new Vector<T>`、`Vector128.Create`）代替静态字段. net5能优化常量访问.
- USE_VECTOR_CREATE_BY_ARRAY: 用向量创建（如 `new Vector<T>`、`Vector128.Create`）代替查询数组. 它能避免数组越界检查.
- REDUCE_MEMORY_USAGE: 减少内存占用. 若启用它, 会屏蔽 废弃的或实验性的数据.
- ALLOW_VECTOR_TUPLES: 允许Tuples命名空间. 实测发现它的效率不佳, 故屏蔽. 预留给未来找到更好办法.
- DRY_JOB: 性能评测时使用 DryJob , 仅运行一次快速得到汇编代码.
- BENCHMARKS_OFF: 关闭评测 . 用于专门测试某个评测时，此时仅需专门打开某一个评测。
- BENCHMARKS_128: 评测128位算法.
- BENCHMARKS_256: 评测256位算法.
- BENCHMARKS_128ALGORITHM: [废弃] 评测各种128位底层算法.
- BENCHMARKS_256ALGORITHM: [废弃] 评测各种256位底层算法.
- BENCHMARKS_ALGORITHM: 评测各种底层算法. 如 ShiftLeft_Multiply .
- BENCHMARKS_CONST: 是否测试常量. 单独申明, 用于 YShuffleG2_Const 等可能会取消的函数的评测.
- BENCHMARKS_RAW: [废弃] 评测各种原始用法. 如 SumSLLRawAvx2 . 【注】原始用法改为根据 BENCHMARKS_ALGORITHM, 使用下划线连接.
- BENCHMARKS_TRAITS_USAGES: [废弃] 评测特征的各种用法. 如 SumSLLTraitsArg, SumSLLTraitsOverload .
- BENCHMARKS_TARGET_FAST: [废弃] 评测目标方法的快速版.

注: 若配置的条件编译符号带了“0”后缀的, 表示关闭. 例如“BCL_BASE_OVERRIDE_STATIC0”, 表示关闭“BCL_BASE_OVERRIDE_STATIC”.

### File (文件)
- USE_VECTOR_CREATE: （小于64位时）是否直接使用向量的构造方法. 该办法在高版本.NET下性能很好. Vector need ?; Vector128/256 need .NET5.
- USE_VECTOR_CREATE_INT64: 对于64位整数, 是否直接使用向量的构造方法. 该办法在高版本.NET下性能很好. Vector need ?; Vector128/256 need .NET7.
- VECTOR_HAS_METHOD: 向量类型是否已提供了算术计算的方法. 没有此标志时, 会回退为标量算法. Vector alway true; Vector128/256 need .NET7.

## Traits method naming convention (特征方法命名约定)

### Base name (基本名称)
Name prefix (名称前缀):
- (None): `.NET` BCL Function (`.NET` BCL 函数)。
- `Y`: mY functions (自创的统一风格函数).

Name suffix (名称后缀):
- `Each128`: Process each 128-bit lane independently, i.e. x86 style（独立处理每个128位泳道，即x86风格）。
- `Append`: 空缺元素将由另一向量进行逐个的添加. 例如循环移位.
- `Insert`: 空缺元素将由另一向量进行原位替换. 例如将“值为零的元素”替换为其他值.
- `Kernel`: 内核版. 为了优化性能, 仅保证内核功能有效. 若参数超出有效范围, 结果可能会不正确, 使用者可以先使用掩码对参数进行限制.
- `G2`/`G3`/`G4`: Group of 4 elements (2/3/4 个元素的组).
- `X2`/`X3`/`X4`: 参数数量翻倍的版本。例如 Vector128<double> 只有2个元素，想做 ShuffleG4 运算的话, 需用 X2 的版本.

### Style suffix (风格后缀)
方法的名称为“BaseName + "_" + StyleSuffix”.

Style suffix (风格后缀):
- `Args`: 用于检查及转换参数. 用本方法转换参数后, 随后可调用 Core 版方法.
- `ArgsX`: [废弃] 用于检查及转换参数, 返回值用的是向量元祖类型 (e.g. VectorX2). 用本方法转换参数后, 随后可调用 Core 版方法.
- `Core`: 核心运算. 需先调用 Args 版函数, 才可调用本方法. 例如 Shuffle_Core .
- `Const`: 常量版. 用于能确保参数在范围内, 且参数是常量时. 参数会用 `ConstantExpected` attribute 说明范围.
- `ConstCore`: 常量版核心运算. 需先调用 Args 版函数, 才可调用本方法. 用于能确保参数在范围内, 且参数是常量时. 参数会用 `ConstantExpected` attribute 说明范围.
- `Fast`: 快速版. 用于能确保参数在范围内, 且参数是变量时.

注: Base name (基本名称)必会提供加速类型检测的属性. 而对于风格后缀, 一般不用提供加速类型检测.

Attribute:
- ConstantExpected: .NET 7.0 就存在了. 位于System.Diagnostics.CodeAnalysis
- ConstExpected: 据说 .NET 8.0会用上. 也可能就是 ConstantExpected .
https://github.com/dotnet/runtime/pull/80192


## nuget

Install package .
```
Install-Package System.Numerics.Vectors -Version 4.5.0
Install-Package System.Runtime.CompilerServices.Unsafe -Version 4.5.3
Install-Package System.Runtime.InteropServices.RuntimeInformation -Version 4.3.0
Install-Package System.ValueTuple -Version 4.5.0
```


## Differences between platforms (各平台的差异)
### Abs

#### Abs - Arm
System.OverflowException : Negating the minimum value of a twos complement number is invalid.

### Max/Min

#### Max with NaN

##### Max with NaN - Conclusion(总结)

Max of C#(or x86 SIMD): (a>b)?a:b; // If a or b is NaN, alway return b.
Min of C#(or x86 SIMD): (a<b)?a:b; // If a or b is NaN, alway return b.
-
Max of Arm SIMD: (IsNaN(a))?a:(IsNaN(b))?b: (a>b)?a:b; // If a or b is NaN, alway return NaN.
Min of Arm SIMD: (IsNaN(a))?a:(IsNaN(b))?b: (a<b)?a:b; // If a or b is NaN, alway return NaN.
MaxNumber of Arm SIMD: Think of NaN as -Infinity.
MinNumber of Arm SIMD: Think of NaN as +Infinity.

##### Max with NaN - `C#`
https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/comparison-operators
```
For the ==, <, >, <=, and >= operators, if any of the operands is not a number (Double.NaN or Single.NaN), the result of operation is false. That means that the NaN value is neither greater than, less than, nor equal to any other double (or float) value, including NaN. 
```

https://learn.microsoft.com/en-us/dotnet/api/system.double.nan?view=net-7.0#system-double-nan
```
Use the IsNaN method to determine whether a value is not a number. The Equality operator considers two NaN values to be unequal to one another. In general, Double operators cannot be used to compare Double.NaN with other Double values, although comparison methods (such as Equals and CompareTo) can. The following example illustrates the difference in behavior between Double comparison operators and methods.
 The example displays the following output:
       NaN == NaN: False
       NaN != NaN: True
       NaN.Equals(NaN): True
       ! NaN.Equals(NaN): False
       IsNaN: True

       NaN > NaN: False
       NaN >= NaN: False
       NaN < NaN: False
       NaN < 100.0: False
       NaN <= 100.0: False
       NaN >= 100.0: False
       NaN.CompareTo(NaN): 0
       NaN.CompareTo(100.0): -1
       (100.0).CompareTo(Double.NaN): 1
```

C# Interactive Windows
```
> (100.0).CompareTo(Double.NaN)
1
> (-100.0).CompareTo(Double.NaN)
1
> (Double.NegativeInfinity).CompareTo(Double.NaN)
1
> (Double.NaN).CompareTo(Double.NegativeInfinity)
-1
> Double.NegativeInfinity > Double.NaN
false
> Double.NegativeInfinity < Double.NaN
false
> Double.NaN < Double.NegativeInfinity
false
```

##### Max with NaN - Arm
Vector128<double> Max(Vector128<double> left, Vector128<double> right) { throw new PlatformNotSupportedException(); }
`float64x2_t vmaxq_f64 (float64x2_t a, float64x2_t b)`
```
https://developer.arm.com/documentation/ddi0596/2021-03/Shared-Pseudocode/Shared-Functions?lang=en#impl-shared.FPMax.4
Library pseudocode for shared/functions/float/fpmax/FPMax
bits(N) FPMax(bits(N) op1, bits(N) op2, FPCRType fpcr)
...
    (done,result) = FPProcessNaNs(type1, type2, op1, op2, fpcr, altfp, TRUE);
-
https://developer.arm.com/documentation/ddi0596/2021-03/Shared-Pseudocode/Shared-Functions?lang=en#impl-shared.FPProcessNaNs.7
Library pseudocode for shared/functions/float/fpprocessnans/FPProcessNaNs
(boolean, bits(N)) FPProcessNaNs(FPType type1, FPType type2, bits(N) op1,
                                 bits(N) op2, FPCRType fpcr)
...
    boolean altfp    = HaveAltFP() && !UsingAArch32() && fpcr.AH == '1';
    boolean op1_nan  = type1 IN {FPType_SNaN, FPType_QNaN};
    boolean op2_nan  = type2 IN {FPType_SNaN, FPType_QNaN};
    boolean any_snan = type1 == FPType_SNaN || type2 == FPType_SNaN;
    FPType  type_nan = if any_snan then FPType_SNaN else FPType_QNaN;

    if altfmaxfmin && (op1_nan || op2_nan) then
        FPProcessException(FPExc_InvalidOp, fpcr);
        done = TRUE; sign2 = op2<N-1>;
        result = if type2 == FPType_Zero then FPZero(sign2) else op2;
    elsif altfp && op1_nan && op2_nan then
        done = TRUE;  result = FPProcessNaN(type_nan, op1, fpcr, fpexc);   // <n> register NaN selected
    elsif type1 == FPType_SNaN then
        done = TRUE;  result = FPProcessNaN(type1, op1, fpcr, fpexc);
    elsif type2 == FPType_SNaN then
        done = TRUE;  result = FPProcessNaN(type2, op2, fpcr, fpexc);
    elsif type1 == FPType_QNaN then
        done = TRUE;  result = FPProcessNaN(type1, op1, fpcr, fpexc);
    elsif type2 == FPType_QNaN then
        done = TRUE;  result = FPProcessNaN(type2, op2, fpcr, fpexc);
    else
        done = FALSE;  result = Zeros();  // 'Don't care' result
    return (done, result);
-
https://developer.arm.com/documentation/ddi0596/2021-03/Shared-Pseudocode/Shared-Functions?lang=en#impl-shared.FPProcessNaN.4
Library pseudocode for shared/functions/float/fpprocessnan/FPProcessNaN
bits(N) FPProcessNaN(FPType fptype, bits(N) op, FPCRType fpcr)
...
    case N of
        when 16 topfrac =  9;
        when 32 topfrac = 22;
        when 64 topfrac = 51;
    result = op;
    if fptype == FPType_SNaN then
        result<topfrac> = '1';
        if fpexc then FPProcessException(FPExc_InvalidOp, fpcr);
    if fpcr.DN == '1' then  // DefaultNaN requested
        result = FPDefaultNaN(fpcr);
    return result;
```

Vector128<double> MaxNumber(Vector128<double> left, Vector128<double> right)
`float64x2_t vmaxnmq_f64 (float64x2_t a, float64x2_t b)`
```
https://developer.arm.com/documentation/ddi0596/2021-03/Shared-Pseudocode/Shared-Functions?lang=en#impl-shared.FPMaxNum.3
Library pseudocode for shared/functions/float/fpmaxnum/FPMaxNum
bits(N) FPMaxNum(bits(N) op1, bits(N) op2, FPCRType fpcr)...
...
    if !(altfp && type1_nan && type2_nan) then
        // Treat a single quiet-NaN as -Infinity.
        if type1 == FPType_QNaN && type2 != FPType_QNaN then
            op1 = FPInfinity('1');
        elsif type1 != FPType_QNaN && type2 == FPType_QNaN then
            op2 = FPInfinity('1');
```

Vector128<double> MinNumber(Vector128<double> left, Vector128<double> right)
`float64x2_t vminnmq_f64 (float64x2_t a, float64x2_t b)`
```
https://developer.arm.com/documentation/ddi0596/2021-03/Shared-Pseudocode/Shared-Functions?lang=en#impl-shared.FPMinNum.3
Library pseudocode for shared/functions/float/fpminnum/FPMinNum
bits(N) FPMinNum(bits(N) op1, bits(N) op2, FPCRType fpcr)
...
    if !(altfp && type1_nan && type2_nan) then
        // Treat a single quiet-NaN as +Infinity.
        if type1 == FPType_QNaN && type2 != FPType_QNaN then
            op1 = FPInfinity('0');
        elsif type1 != FPType_QNaN && type2 == FPType_QNaN then
            op2 = FPInfinity('0');

```

### Shift series
对于8、16位的移位, C# 会扩展到32位来处理. 但对于SIMD的紧缩8、16位数据来说, 扩展到32位后的运算结果有时会不符. 故应该先对 shiftAmount 做 bitwise-and 运算, 使其限制在合理范围内. 实测发现.NET6仍然是扩展到32位, 而 .NET7 也用掩码处理, 故本类库与 .NET7 保持了一致.

https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/bitwise-and-shift-operators
```
Left-shift operator <<
...
Because the shift operators are defined only for the int, uint, long, and ulong types, the result of an operation always contains at least 32 bits. If the left-hand operand is of another integral type (sbyte, byte, short, ushort, or char), its value is converted to the int type, as the following example shows:
C#
byte a = 0b_1111_0001;
var b = a << 8;
...
Shift amount of the shift operators
For the built-in shift operators <<, >>, and >>>, the type of the right-hand operand must be int or a type that has a predefined implicit numeric conversion to int.
For the x << count, x >> count, and x >>> count expressions, the actual shift amount depends on the type of x as follows:
If the type of x is int or uint, the shift amount is defined by the low-order five bits of the right-hand operand. That is, the shift amount is computed from count & 0x1F (or count & 0b_1_1111).
If the type of x is long or ulong, the shift amount is defined by the low-order six bits of the right-hand operand. That is, the shift amount is computed from count & 0x3F (or count & 0b_11_1111).
```
