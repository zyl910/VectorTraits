@page "/showUnitTest"
@inject IJSRuntime JS
@using NUnit.Common
@using NUnitLite
@using System.Text
@using System.Diagnostics
@using Zyl.VectorTraits.Benchmarks
@using Zyl.VectorTraits.Tests;

<PageTitle>Show unit test</PageTitle>

<h1>Show unit test</h1>

<button class="btn btn-primary" @onclick="OnTest" disabled=@IsTaskRunning>Test</button>
&nbsp; <span>@statePercentage</span>
<br />
<InputCheckbox @bind-Value="IsScrollMyTexArea" />Scroll to bottom
<br />
<br />
<InputTextArea id="txtOut" @bind-Value="resultText" readonly rows="30" style="width: 95%" />

<script>
    window.scrollMyTexArea = () => {
              var obj = document.getElementById('txtOut');
              obj.scrollTop = obj.scrollHeight;
    };
</script>

@code {
    private bool IsTaskRunning = false;
    private bool IsScrollMyTexArea = true;
    private string resultText = "";
    private string statePercentage = "";

    private async Task OnTest() {
        StringWriter writer = new StringWriter();
        writer.WriteLine("VectorTraits.Benchmarks.Wasm");
        writer.WriteLine();
        // run.
        await OnTest_Coroutine(writer);
    }

    private async Task OnTest_Coroutine(TextWriter writer) {
        IsTaskRunning = true;
        try {
            resultText = "";
            statePercentage = "";
            string indent = "";
            writer.WriteLine();
            BenchmarkUtil.OutputEnvironment(writer, indent);
            writer.WriteLine();
            resultText = "" + writer?.ToString();
            await InvokeAsync(StateHasChanged);
            await CallScrollMyTexArea();
            await Task.Delay(1);
            // Run.
            //await OnTestCoreAync(writer);
            OnTestCore(writer);
            //await Task.Factory.StartNew(() => OnTestCore(writer), TaskCreationOptions.LongRunning); // No wait finish.
        } catch (Exception ex) {
            System.Diagnostics.Debug.WriteLine(ex);
            writer.WriteLine(ex);
        } finally {
            IsTaskRunning = false;
        }
        statePercentage = "";
        // Show.
        resultText = writer?.ToString();
        StateHasChanged();
        await CallScrollMyTexArea();
    }

    private void OnTestCore(TextWriter writer) {
        // AutoRun autoRun = new AutoRun();
        // autoRun.Execute(args);
        string[] args = { };
        ExtendedTextWriter outWriter = new ExtendedTextWrapper(writer);
        using (StringReader reader = new StringReader("")) {
            var _testAssembly = typeof(VectorTextUtilTests).Assembly;
            TextRunner textRunner = new TextRunner(_testAssembly);
            textRunner.Execute(outWriter, reader, args);
        }
    }

    // private async Task OnTestCoreAync(TextWriter writer) {
    //     string[] args = { };
    //     ExtendedTextWriter outWriter = new ExtendedTextWrapper(writer);
    //     using(StringReader reader = new StringReader("")) {
    //         var _testAssembly = typeof(VectorTextUtilTests).Assembly;
    //         TextRunner textRunner = new TextRunner(_testAssembly);
    //         textRunner.Execute(outWriter, reader, args);
    //     }

    //     async Task onBefore(double percentage, string title) {
    //         Debug.WriteLine(percentage);
    //         try {
    //             statePercentage = string.Format("{0:0.00}%: {1}", percentage, title);
    //             resultText = "" + writer?.ToString();
    //             await InvokeAsync(StateHasChanged);
    //             await CallScrollMyTexArea();
    //             await Task.Delay(1);
    //         } catch (Exception ex) {
    //             Debug.WriteLine(ex);
    //         }
    //     }
    // }

    private async Task CallScrollMyTexArea() {
        if (IsScrollMyTexArea) {
            await JS.InvokeVoidAsync("scrollMyTexArea");
        }
    }

}
