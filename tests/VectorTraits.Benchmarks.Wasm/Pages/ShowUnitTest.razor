@page "/showUnitTest"
@inject IJSRuntime JS
@using NUnit.Common
@using NUnitLite
@using System.Text
@using System.Diagnostics
@using NUnitOnWasm.TestRunner
@using Zyl.VectorTraits.Benchmarks
@using Zyl.VectorTraits.Tests;

<PageTitle>Show unit test</PageTitle>

<h1>Show unit test</h1>

<button class="btn btn-primary" @onclick="OnTest" disabled=@IsTaskRunning>Test</button>
&nbsp; <span>@statePercentage</span>
<br />
<InputCheckbox @bind-Value="IsScrollMyTexArea" />Scroll to bottom
<br />
<br />
<InputTextArea id="txtOut" @bind-Value="resultText" readonly rows="30" style="width: 95%" />

<script>
    window.scrollMyTexArea = () => {
              var obj = document.getElementById('txtOut');
              obj.scrollTop = obj.scrollHeight;
    };
</script>

@code {
    private bool IsTaskRunning = false;
    private bool IsScrollMyTexArea = true;
    private string resultText = "";
    private string statePercentage = "";

    private async Task OnTest() {
        StringWriter writer = new StringWriter();
        writer.WriteLine("VectorTraits.Benchmarks.Wasm");
        writer.WriteLine();
        // run.
        await OnTest_Coroutine(writer);
    }

    private async Task OnTest_Coroutine(TextWriter writer) {
        IsTaskRunning = true;
        try {
            resultText = "";
            statePercentage = "";
            string indent = "";
            writer.WriteLine();
            BenchmarkUtil.OutputEnvironment(writer, indent);
            writer.WriteLine();
            resultText = "" + writer?.ToString();
            await InvokeAsync(StateHasChanged);
            await CallScrollMyTexArea();
            await Task.Delay(1);
            // Run.
            if (null!= writer) {
                //await OnTestCoreAync(writer);
                OnTestCore(writer);
            }
            //await Task.Factory.StartNew(() => OnTestCore(writer), TaskCreationOptions.LongRunning); // No wait finish.
        } catch (Exception ex) {
            System.Diagnostics.Debug.WriteLine(ex);
            writer.WriteLine(ex);
        } finally {
            IsTaskRunning = false;
        }
        statePercentage = "";
        // Show.
        resultText = writer.ToString() ?? "";
        StateHasChanged();
        await CallScrollMyTexArea();
    }

    private void OnTestCore(TextWriter writer) {
        string[] args = new[] { "--noresult", "--labels=ON" };
        var assembly = typeof(VectorTextUtilTests).Assembly;

        var sw = new Stopwatch();
        sw.Start();
        //var outWriter = new ExtendedTextWrapper(Console.Out);
        var outWriter = new ExtendedTextWrapper(writer);
        var runner = new WasmRunner(assembly);
        runner.Execute(outWriter, TextReader.Null, args);
        sw.Stop();
        Console.WriteLine($"roundtrip took {sw.ElapsedMilliseconds} ms");
        Console.WriteLine($"Summary is {runner.Summary}");
        if (null == runner.Summary) {
            return;
        }
        var FailedCount = runner.Summary.FailedCount;
        var TestCount = runner.Summary.TestCount;
        Console.WriteLine($"FailedCount is {FailedCount}, TestCount is {TestCount}");
    }

    private async Task CallScrollMyTexArea() {
        if (IsScrollMyTexArea) {
            await JS.InvokeVoidAsync("scrollMyTexArea");
        }
    }

}
