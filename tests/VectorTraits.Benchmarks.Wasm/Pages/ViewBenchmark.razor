@page "/viewBenchmark"
@inject IJSRuntime JS
@using System.Text
@using System.Diagnostics
@using Zyl.VectorTraits.Benchmarks

<PageTitle>View benchmark</PageTitle>

<h1>View benchmark</h1>

<button class="btn btn-primary" @onclick="OnTest" disabled=@IsTaskRunning>Test</button>
&nbsp; <span>@statePercentage</span>
<br />
<InputCheckbox @bind-Value="IsScrollMyTexArea" />Scroll to bottom
&nbsp; <InputCheckbox @bind-Value="AllowFakeBenchmark" />AllowFakeBenchmark
<br />
<br />
<InputTextArea id="txtOut" @bind-Value="resultText" readonly rows="30" style="width: 95%" />

<script>
    window.scrollMyTexArea = () => {
              var obj = document.getElementById('txtOut');
              obj.scrollTop = obj.scrollHeight;
    };
</script>

@code {
    private bool IsTaskRunning = false;
    private bool IsScrollMyTexArea = true;
    private bool AllowFakeBenchmark = false;
    private string resultText = "";
    private string statePercentage = "";

    private async Task OnTest() {
        StringWriter writer = new StringWriter();
        writer.WriteLine("VectorTraits.Benchmarks.Wasm");
        writer.WriteLine();
        BenchmarkUtil.AllowFakeBenchmark = AllowFakeBenchmark;
        // run.
        await OnTest_Coroutine(writer);
    }

    private async Task OnTest_Coroutine(TextWriter writer) {
        IsTaskRunning = true;
        try {
            resultText = "";
            statePercentage = "";
            await OnTestCoreAync(writer);
        } catch (Exception ex) {
            System.Diagnostics.Debug.WriteLine(ex);
            writer.WriteLine(ex);
        } finally {
            IsTaskRunning = false;
        }
        statePercentage = "";
        // Show.
        resultText = writer.ToString();
        StateHasChanged();
        if (IsScrollMyTexArea) {
            await JS.InvokeVoidAsync("scrollMyTexArea");
        }
    }

    private async Task OnTestCoreAync(TextWriter writer) {
        string[] args = { };
        string indent = "";
        writer.WriteLine();
        BenchmarkUtil.OutputEnvironment(writer, indent);
        //TraitsOutput.ParseWaitDebugAndReadKey(args);
        writer.WriteLine();
        //BenchmarkUtil.ParseCommand(args);
        await BenchmarkMain.RunBenchmarkAsync(writer, indent, onBefore);
        writer.WriteLine();
        AloneTestUtil.AloneTestByCommand(writer, args);

        async Task onBefore(double percentage, string title) {
            Debug.WriteLine(percentage);
            try {
                statePercentage = string.Format("{0:0.00}%: {1}", percentage, title);
                resultText = "" + writer?.ToString();
                await InvokeAsync(StateHasChanged);
                if (IsScrollMyTexArea) {
                    await JS.InvokeVoidAsync("scrollMyTexArea");
                }
                await Task.Delay(1);
            } catch (Exception ex) {
                Debug.WriteLine(ex);
            }
        }
    }

    private void AppendLine(string str) {
        if (resultText.Length > 0x10000) {
            resultText = "";
        }
        resultText += str + Environment.NewLine;
    }

}
